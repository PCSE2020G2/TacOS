#include <fs.hmm>
#include <util.hmm>
#include "appUtil.hmm"
#include "mp3Files.hmm"
#include <mm.hmm>

//-----------------------------------------------------------------------------
// MP3ファイルの一覧（ただし，最大５個）
//-----------------------------------------------------------------------------
// ５つのファイル名
char[][] fnames;
//char[][] fnames = array(5, 13);  
int numFile;                                        // ファイルの個数

char[] mp3Dir = "/MP3";
char[] path = array(18);                            // /MP3/12345678.123

char[][] pathlist;
int[][] musicIndex;  //プレイリストの曲管理
                                                                                                                        
char[] fnameToPath(char[] fname) {
  strCpy(path, mp3Dir);
  strCat(path, "/");                                                                                                      
  strCat(path, fname);
  return path;
}

public int getLenList(int m){
  int b = 0;  //プレイリスト内の音楽の総数
  for(int i=0; i<numFile; i=i+1){
    b = b + musicIndex[m][i];
  }
  return b;
}

//カーソルの位置から6曲分の曲名を返す
//m:プレイリストの値
//n:カーソルの位置
public char[][] getListContents(int m, int n){
  //fnames0の初期化
  char[][] fnames0;
  fnames0 = malloc(sizeof(void[])*6);
  for(int i=0; i<6; i=i+1){
    fnames0[i] = malloc(sizeof(int)*13);
  }
  
  int i=0;  
  int j=0;   //fnames参照用
  while(i<n){
    if(musicIndex[m][j]==1){
      i=i+1;
    }
    j=j+1;
  }
  
  int k=0;   //jから6つの曲名（musicIndex==1になる）をfnames0に格納
  while(k<6){
    if(musicIndex[m][j]==1){
      fnames0[k] = fnames[j];
      k=k+1;
    }
    j=j+1;
  }
  return fnames0;

}


// /MP3 ディレクトリからファイルの一覧を作る（初期化）
public void mp3FilesInit() {
  int fd;                                           // ファイルディスクリプタ
  if ((fd=open(mp3Dir, READ_MODE))<0) {
    panic("panic:can't open MP3 Dir");
  }
  Dir1 dir;
  int a = 0;
  while ((dir=readDir1(fd, "MP3"))!=null) {   // 曲の総数計算
    a = a + 1;
  }
  numFile = a;
  

//fnamesの初期化
  fnames = malloc(sizeof(void[])*numFile);
  for(int i=0; i<numFile; i=i+1){
    fnames[i] = malloc(sizeof(int)*13);
  }

  a = 0;
  while (a<numFile && (dir=readDir1(fd, "MP3"))!=null) {   // fnameにderの名前をコピー
    strCpy(fnames[a], dir.name);
    a = a + 1;
  }
  close(fd);

//musicIndexの初期化
  musicIndex = malloc(sizeof(void[])*7);
  for(int i=0; i<7; i=i+1){
    musicIndex[i] = malloc(sizeof(int)*numFile);
  }
  for(int i=0; i<numFile; i=i+1){
    musicIndex[0][i] = 1;
    for(int j=1; j<7; j=j+1){
      musicIndex[j][i] = 0;
    }
  }
  //getListContentsのデバッグ
  for(int i=0; i<numFile; i=i+2){
      musicIndex[1][i] = 1;
  }
  char[][] d = getListContents(1, 3);
  for(int i=0; i<6; i=i+1){
      printF("%s\n", d[i]);
  }
}

// n 番目ファイル名を返す（0<=n && n<numFile）
public char[] mp3FilesGetName(int n) {
  if (0<=n && n<numFile) {
    return fnames[n];
  }
  return null;
}

// n 番目パス名を返す（0<=n && n<numFile）
public char[] mp3FilesGetPath(int n) {
  if (0<=n && n<numFile) {
    return fnameToPath(fnames[n-1]);
  }
  return null;
}

//プレイリストの曲追加・削除用
public void managePlaylist(int a, int b){
  if(musicIndex[a][b] == 0)
    musicIndex[a][b] = 1;
  else musicIndex[a][b] = 0;
}

//













/*
 * TacOS Source Code
 *    Tokuyama kousen Advanced educational Computer.
 *
 * Copyright (C) 2020 by
 *                      Dept. of Computer Science and Electronic Engineering,
 *                      Tokuyama College of Technology, JAPAN
 *
 *   上記著作権者は，Free Software Foundation によって公開されている GNU 一般公
 * 衆利用許諾契約書バージョン２に記述されている条件を満たす場合に限り，本ソース
 * コード(本ソースコードを改変したものを含む．以下同様)を使用・複製・改変・再配
 * 布することを無償で許諾する．
 *
 *   本ソースコードは＊全くの無保証＊で提供されるものである。上記著作権者および
 * 関連機関・個人は本ソースコードに関して，その適用可能性も含めて，いかなる保証
 * も行わない．また，本ソースコードの利用により直接的または間接的に生じたいかな
 * る損害に関しても，その責任を負わない．
 *
 *
 */

/*
 * shellProc.cmm : MP3 プレーヤのメインプロセス
 *
 * 2020.09.07 : 新規作成
 *
 * $Id$
 *
 */
#include <kernel.hmm>
#include <util.hmm>
#include <mm.hmm>
#include "lcd.hmm"
#include "mp3Proc.hmm"
#include "spi.hmm"
#include "mp3Files.hmm"
#include "shellProc.hmm"

int index=0;
int sceneIndex=0;
int playIndex=0;
int musicindex=0;
int tmpscene=-1;

//-----------------------------------------------------------------------------
// スイッチの読み取り
//-----------------------------------------------------------------------------
// 押しボタンスイッチのビット
#define SW1 0x20
#define SW2 0x10
#define SW3 0x08
#define SW4 0x04
#define SW5 0x02
#define SW6 0x01
#define SWS 0x3f                                    // スイッチのビット全部

int sw0 = 0x00;                                     // 前回の状態(デバウンス前)
int sw1 = 0x00;                                     // 前回の状態(デバウンス後)


int readSw() {
  int sw = ~in(0x18) & SWS;                         // スイッチを読み正論理に変換
  int swd = sw & sw0;                               // デバウンス
  int sw2 = (sw1 ^ swd) & swd;                      // 今回，新たに押されたSW
  sw0 = sw;
  sw1 = swd;
  return sw2;
}

int swToNum(int sw) {
  int num = -1;
  if ((sw & SW6)!=0) {                              // 6 番のスイッチが押された
    num = 6;
  } else if ((sw & SW5)!=0) {                       // 5 番のスイッチが押された
    num = 5;
  } else if ((sw & SW4)!=0) {                       // 4 番のスイッチが押された
    num = 4;
  } else if ((sw & SW3)!=0) {                       // 3 番のスイッチが押された
    num = 3;
  } else if ((sw & SW2)!=0) {                       // 2 番のスイッチが押された
    num = 2;
  } else if ((sw & SW1)!=0) {                       // 1 番のスイッチが押された
    num = 1;
  }
  return num;
}

void changeindex(int num){
  if(num==1){
    index=index-1;
  } else if(num==5){
    index=index+1;
  }
}

//-----------------------------------------------------------------------------
// 画面表示
//-----------------------------------------------------------------------------
void demoScreen(){
  cls();                                            // LCDをクリアする
  locateXY(0,0); putStr("MP3 Player demo");
  for (int i=1; i<=5; i=i+1) {                      // スイッチ1〜5に付いて
    locateXY(2,i+1);
    putCh(chr(ord('0')+i));                         // スイッチの番号
    putStr(":");
    char[] fname = mp3FilesGetName(i);              // 対応するファイル名
    if (fname!=null) putStr(fname);
  }
  locateXY(2,7);
  putStr("6:stop");                                 // 6番のスイッチ
}


void demoScreen1() {
  cls();                                            // LCDをクリアする
    locateXY(4,4);
    putStr("PASSWORD");
}

void demoScreen2() {
  cls();                                            // LCDをクリアする
  locateXY(0,0); putStr("HOME");
  locateXY(1,1);
  putStr("ALL");
  locateXY(1,2);
  putStr("Playlist1");
  locateXY(1,3);
  putStr("Playlist2");
  locateXY(1,4);
  putStr("Playlist3");
  locateXY(1,5);
  putStr("Playlist4");
  locateXY(1,6);
  putStr("Playlist5");
  locateXY(1,7);
  putStr("Playlist6");
}

void demoScreen3() {
  cls();                                            // LCDをクリアする
  locateXY(0,0);
  if (playIndex==0){
    putStr("ALL");
  }
  else{
    putStr("Playlist");
    //locateXY(8,0)
    putCh(chr(ord('0')+playIndex));
  }
  for (int i=1; i<=7; i=i+1) {                      // スイッチ1〜5に付いて
    locateXY(1,i);
    char[] fname = mp3FilesGetName(1);              // 対応するファイル名
    if (fname!=null) putStr(fname);
  }
}

void demoScreen4() {///////3toonaji saisyo
  cls();                                            // LCDをクリアする
  locateXY(0,0);
  char[] fname = mp3FilesGetName(1);              // 対応するファイル名
  if (fname!=null) putStr(fname);
  locateXY(1,1);
  putStr("Play");
  locateXY(1,2);
  putStr("Stop");
  locateXY(1,3);
  putStr("Previous music");
  locateXY(1,4);
  putStr("Next music");

}

void demoScreen5() { //playlist
  cls();                                            // LCDをクリアする
  locateXY(0,0);
    char[] fname = mp3FilesGetName(1);              // 対応するファイル名
    if (fname!=null) putStr(fname);
  locateXY(1,1);
  putStr("---");
  locateXY(1,2);
  putStr("Playlist1");
  locateXY(1,3);
  putStr("Playlist2");
  locateXY(1,4);
  putStr("Playlist3");
  locateXY(1,5);
  putStr("Playlist4");
  locateXY(1,6);
  putStr("Playlist5");
  locateXY(1,7);
  putStr("Playlist6");
//  locateXY(1,7);
//  putStr("Playlist7");
}

void demoScreen6() {
  cls();                                            // LCDをクリアする
}

void asta(int y) {
//  demoScreen();
  locateXY(0, y+1);
  putCh('*');
}


void updateIndex(int num){
  if (num==1) {
    if(index==0) index=0; //下限はもらう
    else index=index-1;
  }
  else if(index==6) index=6; //上限はもらう
    else index=index+1;
}


//-----------------------------------------------------------------------------
// MP3 プレーヤのメインプロセス
//-----------------------------------------------------------------------------
// ここからプロセスの実行が始まる
public void shellMain() {
  spiResetLcd();                                    // sleepを使用するので
  spiResetMp3();                                    //   プロセスが実行する
  mp3FilesInit();                                   // ファイル一覧を作る
  demoScreen();                                     // 画面を初期化
  int cnt=0;
  for (;;) {                                        // pwd画面
    int sw = readSw();
    int num = swToNum(sw);
    demoScreen1();
    if (num==1||num==5) {
      if(cnt==0){
        if(num==1){
          cnt=cnt+1;
        }
        else cnt=0;
      }
      else if(cnt==1){
        if(num==5){
          cnt=cnt+1;
        }
        else cnt=0;
      }
      else if(cnt==2){
        if(num==1){
          cnt=cnt+1;
        }
        else cnt=0;
      }
      else if(cnt==3){
        if(num==5){
          sceneIndex=1;
          demoScreen2();
          asta(index);
          break;
        }
        else cnt=0;
      }
    }
    sleep(10);                                      // 10ms に一度
  }

  for (;;) {                  //2
    int sw = readSw();
    int num = swToNum(sw);

    if(num>0){
      if(num==4){
        if(sceneIndex!=5){
        tmpscene=sceneIndex;
        sceneIndex=5;
        demoScreen6();
        }
        continue;
      }
      if(sceneIndex==1){  //home
        demoScreen2();
        if (num==1||num==5) {
          updateIndex(num);
          playIndex=index;
          demoScreen2();
        }
        else if(num==3){
          sceneIndex=sceneIndex+1;
          index=0;
          demoScreen3();
        }

        asta(index);
      }

      else if(sceneIndex==2){ //music select
        demoScreen3();
        if (num==1||num==5) {
          updateIndex(num);
          demoScreen3();
        }
        else if(num==3){
          sceneIndex=sceneIndex+1;
          musicindex=index;
          index=0;
          demoScreen4();
        }
        else if(num==2){
          sceneIndex=sceneIndex-1;
          index=0;
          demoScreen2();
        }
        else if(num==6){
          sceneIndex=5;
          musicindex=index;
          index=0;
          demoScreen5();
        }

        asta(index);
      }

      else if(sceneIndex==3){   //play disp
        demoScreen4();
        if (num==1||num==5) {
          updateIndex(num);
          demoScreen4();
        }
        else if(num==3){
          if(index==0){}//play
          else if(index==1){}//Stop
          else if(index==2){
            if(musicindex!=0) musicindex=musicindex-1;
          }
          else if(index==3){

          }
          sceneIndex=sceneIndex+1;
          index=0;
          demoScreen5();
        }
        else if(num==2){
          sceneIndex=sceneIndex-1;
          index=musicindex%6;
          demoScreen3();
        }

        asta(index);
      }

      else if(sceneIndex==4){ //playlist add
        demoScreen5();
        if (num==1||num==5) {
          updateIndex(num);
          demoScreen5();
        }
    //    else if(num==3){
    //      sceneIndex=sceneIndex+1;
    //      index=0;
    //    }
        else if(num==2){
          sceneIndex=sceneIndex-1;
          index=0;
          demoScreen4();
        }

        asta(index);
      }


      else if(sceneIndex==5){
        sceneIndex=tmpscene;
        tmpscene=-1;
        if(sceneIndex==1) demoScreen2();
        else if(sceneIndex==2) demoScreen3();
        else if(sceneIndex==3) demoScreen4();
        else if(sceneIndex==4) demoScreen5();
        asta(index);
      }
    }

    sleep(10);                                      // 10ms に一度
  }

  for (;;) {                  //2
    int sw = readSw();
    int num = swToNum(sw);

    if (num==1||num==5) {                                   // 6 番のスイッチが押された
      dbgPutStr("stop\n");
      demoScreen();                                 // 画面を初期化
      stop();
    } else if (num>0 && mp3FilesGetName(num)!=null) { // ファイルと対応するボタン
      demoScreen();                                 // 画面を初期化
      changeindex(num);
      asta(index);                                    // 再生中の曲に印を表示
      play(mp3FilesGetPath(num));                   // 再生開始
      dbgPutStr(mp3FilesGetPath(num));
      dbgPutStr("\n");
    }
    sleep(10);                                      // 10ms に一度
  }

}
